{"version":3,"sources":["Containers/WeatherReport.js","Components/Title.js","App.js","serviceWorker.js","index.js"],"names":["API_KEY","WeatherReport","state","city","country","data","error","Comp","getWeather","e","preventDefault","RegExp","test","axios","get","then","res","setState","default","catch","err","response","this","Fragment","className","onSubmit","htmlFor","type","value","required","onChange","target","Component","Title","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"gSAGMA,EAAU,mCAoGDC,E,4MAjGbC,MAAQ,CACNC,KAAM,GACNC,QAAS,GACTC,KAAM,GACNC,MAAO,GACPC,KAAM,I,EAGRC,WAAa,SAACC,GACZA,EAAEC,iBAEF,IAAIP,EAAO,EAAKD,MAAMC,KAEPQ,OACb,wEAGYC,KAAKT,GAQjBU,IACGC,IADH,4DAEyDX,EAFzD,kBAEuEH,IAEpEe,MAAK,SAACC,GACL,EAAKC,SAAS,CACZZ,KAAMW,EAAIX,OAEZ,6BAAoCU,MAAK,SAACC,GACxC,EAAKC,SAAS,CACZV,KAAMS,EAAIE,gBAIfC,OAAM,SAACC,GACN,EAAKH,SAAS,CACZX,MAAOc,EAAIC,UAAYD,EAAIC,SAAShB,OAEtC,6BAAkCU,MAAK,SAACC,GACtC,EAAKC,SAAS,CACZV,KAAMS,EAAIE,gBA3BlB,6BAAkCH,MAAK,SAACC,GACtC,EAAKC,SAAS,CACZV,KAAMS,EAAIE,QACVZ,MAAO,6C,uDA8BL,IAAD,OACCC,EAASe,KAAKpB,MAAdK,KACR,OACE,kBAAC,IAAMgB,SAAP,KACE,wBAAIC,UAAU,2BAAd,iCACiC,KAEjC,yBAAKA,UAAU,6BACb,0BAAMA,UAAU,cAAcC,SAAUH,KAAKd,YAC3C,yBAAKgB,UAAU,cACb,2BAAOE,QAAQ,OAAOF,UAAU,QAAhC,SAGA,2BACEG,KAAK,OACLH,UAAU,oBACVI,MAAON,KAAKpB,MAAMC,KAClB0B,UAAQ,EACRC,SAAU,SAACrB,GACT,EAAKQ,SAAS,CACZd,KAAMM,EAAEsB,OAAOH,MACfvB,KAAM,GACNC,MAAO,GACPC,KAAM,SAMd,4BAAQoB,KAAK,SAASH,UAAU,kBAAhC,iBAMHF,KAAKpB,MAAMK,MACV,kBAACA,EAAD,CACEF,KAAMiB,KAAKpB,MAAMG,KACjBC,MAAOgB,KAAKpB,MAAMI,MAClBH,KAAMmB,KAAKpB,MAAMC,Y,GA3FD6B,aCKbC,EARD,WACZ,OACE,yBAAKT,UAAU,wDACb,wBAAIA,UAAU,QAAd,oB,MCSSU,MATf,WACE,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEd9B,OAAM,SAAAb,GACL4C,QAAQ5C,MAAMA,EAAM6C,c","file":"static/js/main.7cb3d6a8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst API_KEY = \"4411ce3c496ff3b079ef3de96745265e\";\r\n\r\nclass WeatherReport extends Component {\r\n  state = {\r\n    city: \"\",\r\n    country: \"\",\r\n    data: {},\r\n    error: {},\r\n    Comp: \"\",\r\n  };\r\n\r\n  getWeather = (e) => {\r\n    e.preventDefault();\r\n\r\n    var city = this.state.city;\r\n\r\n    var nametest = RegExp(\r\n      /^[a-zA-Z\\u0080-\\u024F]+(?:([\\ \\-\\']|(\\.\\ ))[a-zA-Z\\u0080-\\u024F]+)*$/\r\n    );\r\n\r\n    if (!nametest.test(city)) {\r\n      import(\"../Components/ErrorComp\").then((res) => {\r\n        this.setState({\r\n          Comp: res.default,\r\n          error: \"Please enter valid City/Country Name\",\r\n        });\r\n      });\r\n    } else {\r\n      axios\r\n        .get(\r\n          `https://api.openweathermap.org/data/2.5/weather?q=${city}&APPID=${API_KEY}`\r\n        )\r\n        .then((res) => {\r\n          this.setState({\r\n            data: res.data,\r\n          });\r\n          import(\"../Components/DispWeather\").then((res) => {\r\n            this.setState({\r\n              Comp: res.default,\r\n            });\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          this.setState({\r\n            error: err.response && err.response.data,\r\n          });\r\n          import(\"../Components/ErrorComp\").then((res) => {\r\n            this.setState({\r\n              Comp: res.default,\r\n            });\r\n          });\r\n        });\r\n    }\r\n  };\r\n  render() {\r\n    const { Comp } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <h3 className=\" mt-4 text-center title\">\r\n          Let's find out today's weather{\" \"}\r\n        </h3>\r\n        <div className=\"container form-style mt-3\">\r\n          <form className=\"form-inline\" onSubmit={this.getWeather}>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"city\" className=\"mr-3\">\r\n                City:\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control mr-3\"\r\n                value={this.state.city}\r\n                required\r\n                onChange={(e) => {\r\n                  this.setState({\r\n                    city: e.target.value,\r\n                    data: \"\",\r\n                    error: \"\",\r\n                    Comp: \"\",\r\n                  });\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <button type=\"submit\" className=\"btn herobutton\">\r\n              Get Weather\r\n            </button>\r\n          </form>\r\n        </div>\r\n\r\n        {this.state.Comp && (\r\n          <Comp\r\n            data={this.state.data}\r\n            error={this.state.error}\r\n            city={this.state.city}\r\n          />\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default WeatherReport;\r\n","import React from \"react\";\r\n\r\nconst Title = () => {\r\n  return (\r\n    <div className=\"navbar navbar-expand text-white nav-color sticky-top\">\r\n      <h1 className=\"ml-3\">Weather Finder</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import React, { Fragment } from \"react\";\nimport WeatherReport from \"./Containers/WeatherReport\";\nimport Title from \"./Components/Title\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Fragment>\n      <Title></Title>\n      <WeatherReport />\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}